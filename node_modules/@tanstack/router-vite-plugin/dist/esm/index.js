import { normalize, join, isAbsolute } from "path";
import { pathToFileURL, fileURLToPath } from "url";
import { z } from "zod";
import { configSchema as configSchema$1, getConfig as getConfig$1, generator } from "@tanstack/router-generator";
import { splitFile, compileFile, makeCompile } from "./compilers.js";
import { splitPrefix } from "./constants.js";
const configSchema = configSchema$1.extend({
  enableRouteGeneration: z.boolean().optional(),
  experimental: z.object({
    enableCodeSplitting: z.boolean().optional()
  }).optional()
});
const CONFIG_FILE_NAME = "tsr.config.json";
const getConfig = async (inlineConfig, root) => {
  const config = await getConfig$1(inlineConfig, root);
  return configSchema.parse({ ...inlineConfig, ...config });
};
function TanStackRouterVite(inlineConfig = {}) {
  return [
    TanStackRouterViteGenerator(inlineConfig),
    TanStackRouterViteCodeSplitter(inlineConfig)
  ];
}
function TanStackRouterViteGenerator(inlineConfig = {}) {
  let ROOT = process.cwd();
  let userConfig;
  const generate = async () => {
    try {
      await generator(userConfig);
    } catch (err) {
      console.error(err);
      console.info();
    }
  };
  const handleFile = async (file) => {
    const filePath = normalize(file);
    if (filePath === join(ROOT, CONFIG_FILE_NAME)) {
      userConfig = await getConfig(inlineConfig, ROOT);
      return;
    }
    const routesDirectoryPath = isAbsolute(userConfig.routesDirectory) ? userConfig.routesDirectory : join(ROOT, userConfig.routesDirectory);
    if (filePath.startsWith(routesDirectoryPath)) {
      await generate();
    }
  };
  return {
    name: "vite-plugin-tanstack-router-generator",
    configResolved: async (config) => {
      ROOT = config.root;
      userConfig = await getConfig(inlineConfig, ROOT);
      if (userConfig.enableRouteGeneration ?? true) {
        await generate();
      }
    },
    watchChange: async (file, context) => {
      if (userConfig.enableRouteGeneration ?? true) {
        if (["create", "update", "delete"].includes(context.event)) {
          await handleFile(file);
        }
      }
    }
  };
}
function fileIsInRoutesDirectory(filePath, routesDirectory) {
  const routesDirectoryPath = isAbsolute(routesDirectory) ? routesDirectory : join(process.cwd(), routesDirectory);
  return filePath.startsWith(routesDirectoryPath);
}
function TanStackRouterViteCodeSplitter(inlineConfig = {}) {
  let ROOT = process.cwd();
  let userConfig;
  return {
    name: "vite-plugin-tanstack-router-code-splitter",
    enforce: "pre",
    configResolved: async (config) => {
      ROOT = config.root;
      userConfig = await getConfig(inlineConfig, ROOT);
    },
    resolveId(source) {
      var _a;
      if (!((_a = userConfig.experimental) == null ? void 0 : _a.enableCodeSplitting)) {
        return null;
      }
      if (source.startsWith(splitPrefix + ":")) {
        return source.replace(splitPrefix + ":", "");
      }
      return null;
    },
    async transform(code, id, transformOptions) {
      var _a;
      if (!((_a = userConfig.experimental) == null ? void 0 : _a.enableCodeSplitting)) {
        return null;
      }
      const url = pathToFileURL(id);
      url.searchParams.delete("v");
      id = fileURLToPath(url).replace(/\\/g, "/");
      const compile = makeCompile({
        root: ROOT
      });
      if (id.includes(splitPrefix)) {
        const compiled = await splitFile({
          code,
          compile,
          filename: id
          // ref,
        });
        return compiled;
      } else if (fileIsInRoutesDirectory(id, userConfig.routesDirectory) && (code.includes("createRoute(") || code.includes("createFileRoute("))) {
        if (code.includes("@react-refresh")) {
          throw new Error(
            `We detected that the '@vitejs/plugin-react' was passed before '@tanstack/router-vite-plugin'. Please make sure that '@tanstack/router-vite-plugin' is passed before '@vitejs/plugin-react' and try again: 
e.g.

plugins: [
  TanStackRouterVite(), // Place this before viteReact()
  viteReact(),
]
`
          );
        }
        const compiled = await compileFile({
          code,
          compile,
          filename: id
        });
        return compiled;
      }
      return null;
    }
  };
}
export {
  TanStackRouterVite,
  TanStackRouterViteCodeSplitter,
  TanStackRouterViteGenerator,
  configSchema
};
//# sourceMappingURL=index.js.map
