import { z } from 'zod';
import type { Plugin } from 'vite';
export declare const configSchema: z.ZodObject<{
    routeFilePrefix: z.ZodOptional<z.ZodString>;
    routeFileIgnorePrefix: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    routeFileIgnorePattern: z.ZodOptional<z.ZodString>;
    routesDirectory: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    generatedRouteTree: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    quoteStyle: z.ZodDefault<z.ZodOptional<z.ZodEnum<["single", "double"]>>>;
    semicolons: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    disableTypes: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    addExtensions: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    disableLogging: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    enableRouteGeneration: z.ZodOptional<z.ZodBoolean>;
    experimental: z.ZodOptional<z.ZodObject<{
        enableCodeSplitting: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        enableCodeSplitting?: boolean | undefined;
    }, {
        enableCodeSplitting?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    routeFileIgnorePrefix: string;
    routesDirectory: string;
    generatedRouteTree: string;
    quoteStyle: "single" | "double";
    semicolons: boolean;
    disableTypes: boolean;
    addExtensions: boolean;
    disableLogging: boolean;
    routeFilePrefix?: string | undefined;
    routeFileIgnorePattern?: string | undefined;
    enableRouteGeneration?: boolean | undefined;
    experimental?: {
        enableCodeSplitting?: boolean | undefined;
    } | undefined;
}, {
    routeFilePrefix?: string | undefined;
    routeFileIgnorePrefix?: string | undefined;
    routeFileIgnorePattern?: string | undefined;
    routesDirectory?: string | undefined;
    generatedRouteTree?: string | undefined;
    quoteStyle?: "single" | "double" | undefined;
    semicolons?: boolean | undefined;
    disableTypes?: boolean | undefined;
    addExtensions?: boolean | undefined;
    disableLogging?: boolean | undefined;
    enableRouteGeneration?: boolean | undefined;
    experimental?: {
        enableCodeSplitting?: boolean | undefined;
    } | undefined;
}>;
export type Config = z.infer<typeof configSchema>;
export declare function TanStackRouterVite(inlineConfig?: Partial<Config>): Array<Plugin>;
export declare function TanStackRouterViteGenerator(inlineConfig?: Partial<Config>): Plugin;
export declare function TanStackRouterViteCodeSplitter(inlineConfig?: Partial<Config>): Plugin;
